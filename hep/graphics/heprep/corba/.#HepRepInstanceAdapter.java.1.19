package hep.graphics.heprep.corba;

import java.util.Collection;
import java.util.Iterator;
import java.util.LinkedList;

import hep.graphics.heprep.*;
import hep.graphics.heprep.ref.*;
import hep.graphics.heprep.util.*;

/**
 *
 * @author Mark Donszelmann
 *
 * @version $Id: HepRepInstanceAdapter.java,v 1.20 2003/11/24 22:34:47 duns Exp $
 */

public class HepRepInstanceAdapter extends CORBAHepRepAttribute implements HepRepInstance {
    public static final String cvsId = "$Id: HepRepInstanceAdapter.java,v 1.20 2003/11/24 22:34:47 duns Exp $";

    private HepRep heprep;
    private hep.graphics.heprep.corba.idl.HepRepInstance hepRepInstance;
    private HepRepInstance parent;
    private HepRepType type;
    private transient Object userObject;
    private transient LinkedList points;
    private transient LinkedList instances;


    public HepRepInstanceAdapter(HepRep heprep, hep.graphics.heprep.corba.idl.HepRepInstance hepRepInstance, HepRepInstance parent) {
        super();
        this.heprep = heprep;
        this.hepRepInstance = hepRepInstance;
        this.parent = parent;
        type = heprep.getType(hepRepInstance.typeName);
    }

    public HepRepInstance getSuperInstance() {
        return parent;
    }

    public void overlay(HepRepInstance instance) {
        throw new RuntimeException("HepRepInstanceAdapter.overlay is not implemented.");
    }

    public HepRepInstance copy(HepRep heprep, HepRepInstanceTree parent) throws CloneNotSupportedException {
        return copy(heprep, parent, null);
    }

    public HepRepInstance copy(HepRep heprep, HepRepInstance parent) throws CloneNotSupportedException {
        return copy(heprep, parent, null);
    }

    public HepRepInstance copy(HepRep heprep, HepRepInstance parent, HepRepSelectFilter filter) throws CloneNotSupportedException {
        HepRepType type = heprep.getType(getType().getName());
        DefaultHepRepInstance copy = new DefaultHepRepInstance(parent, type);
        return copy(heprep, copy, filter);
    }

    public HepRepInstance copy(HepRep heprep, HepRepInstanceTree parent, HepRepSelectFilter filter) throws CloneNotSupportedException {
        HepRepType type = heprep.getType(getType().getName());
        DefaultHepRepInstance copy = new DefaultHepRepInstance(parent, type);
        return copy(heprep, copy, filter);
    }

    private HepRepInstance copy(HepRep heprep, DefaultHepRepInstance copy, HepRepSelectFilter filter) throws CloneNotSupportedException {
        HepRepUtil.copyAttributes(this, copy);

    	// copy points
        for (Iterator i=getPoints().iterator(); i.hasNext(); ) {
            HepRepPoint point = (HepRepPoint)i.next();
            copy.addPoint(point.copy(copy));
        }
        // copy sub-instances
        for (Iterator i=getInstances().iterator(); i.hasNext(); ) {
            HepRepInstance instance = (HepRepInstance)i.next();
            if ((filter == null) || (filter.select(instance))) {
                copy.addInstance(instance.copy(heprep, copy, filter));
            }
        }

        return copy;
    }

    public void setUserObject(Object object) {
        userObject = object;
    }

    public Object getUserObject() {
        return userObject;
    }

     public HepRepType getType() {
        return type;
    }

    public Collection getInstances() {
        if (instances == null) {
            instances = new LinkedList();
            int n = hepRepInstance.instances.length;
            for (int i=0; i < n; i++) {
                instances.add(new HepRepInstanceAdapter(heprep, hepRepInstance.instances[i], HepRepInstanceAdapter.this));
            }
        }
        return instances;
    }

    public Collection getPoints() {
        if (points == null) {
            points = new LinkedList();
            int n = hepRepInstance.points.length;
            for (int i=0; i < n; i++) {
                points.add(new HepRepPointAdapter(hepRepInstance.points[i], this));
            }
        }
        return points;
    }

    public void addPoint(HepRepPoint point) throws UnsupportedOperationException {
        throw new UnsupportedOperationException("HepRepInstanceAdapter.addPoint is not implemented.");
    }

    public void addInstance(HepRepInstance instance) throws UnsupportedOperationException {
        throw new UnsupportedOperationException("HepRepInstanceAdapter.addInstance is not implemented.");
    }

    public void removeInstance(HepRepInstance instance) throws UnsupportedOperationException {
        throw new UnsupportedOperationException("HepRepInstanceAdapter.removeInstance is not implemented.");
    }

    public HepRepAttValue getAttValue(String name) {
        String lowerCaseName = name.toLowerCase();
        HepRepAttValue attValue = getAttValueFromNode(lowerCaseName);
        return (attValue != null) ? attValue : getType().getAttValue(lowerCaseName);
    }

    protected hep.graphics.heprep.corba.idl.HepRepAttValue[] getAttValues() {
        return hepRepInstance.attValues;
    }
}

