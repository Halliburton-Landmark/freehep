// Copyright 2000, CERN, Switzerland.  All rights reserved.

package hep.graphics.heprep.ref;

import java.io.*;
import java.util.*;

import hep.graphics.heprep.*;
import hep.graphics.heprep.xml.*;
import hep.graphics.heprep.util.*;

import org.freehep.util.*;

/**
 *
 * @author M.Donszelmann
 *
 * @version $Id: DefaultHepRep.java,v 1.25 2003/11/24 22:34:50 duns Exp $
 */

public class DefaultHepRep implements HepRep, Serializable {
    public static final String cvsId = "$Id: DefaultHepRep.java,v 1.25 2003/11/24 22:34:50 duns Exp $";

    private List/*<String>*/ layers = null;                        // of String
    private DoubleHashtable instanceTrees = new DoubleHashtable(); // of HepRepInstanceTrees by name and version
    private DoubleHashtable typeTrees = new DoubleHashtable();     // of HepRepTypeTrees by name and version

    public DefaultHepRep() {
        try {
            XMLHepRepReader.readDefaults();
        } catch(Exception e) {
            System.err.println("Warning: unable to read HepRep default attributes from XML");
        }
    }

    public HepRep copy() throws CloneNotSupportedException {
        return copy(null);
    }

    public HepRep copy(HepRepSelectFilter filter) throws CloneNotSupportedException {
        DefaultHepRep copy = new DefaultHepRep();

        // copy layers
        for (Iterator i=getLayerOrder().iterator(); i.hasNext(); ) {
            copy.addLayer((String)i.next());
        }

        // copy type trees
        for (Iterator i=getTypeTrees().iterator(); i.hasNext(); ) {
            HepRepTypeTree typeTree = (HepRepTypeTree)i.next();
            copy.addTypeTree(typeTree.copy(copy));
        }

        // copy instance trees
        for (Iterator i=getInstanceTrees().iterator(); i.hasNext(); ) {
            HepRepInstanceTree instanceTree = (HepRepInstanceTree)i.next();
            copy.addInstanceTree(instanceTree.copy(copy, filter));
        }
        return copy;
    }

    public List getLayerOrder() {
        if (layers == null) addLayer("default");
        return layers;
    }

    public void addLayer(String layer) {
        if (layers == null) layers = new ArrayList();
        layers.add(layer);
    }

    public void addTypeTree(HepRepTypeTree type) {
        typeTrees.put(type.getName(), type.getVersion(), type);
    }

    public void removeTypeTree(HepRepTypeTree typeTree) {
        typeTrees.remove(typeTree);
    }

    public HepRepTypeTree getTypeTree(String name, String version) {
        return (HepRepTypeTree)typeTrees.get(name, version);
    }

    public Collection getTypeTrees() {
        return typeTrees;
    }

    public HepRepType getType(String name) {
        return HepRepUtil.getTypeFromTrees(getTypeTrees(), name);
    }

    public void addInstanceTree(HepRepInstanceTree instance) {
        instanceTrees.put(instance.getName(), instance.getVersion(), instance);
    }

    public void overlayInstanceTree(HepRepInstanceTree instanceTree) {
        // check to see if the instanceTree exists
        HepRepInstanceTree originalTree = getInstanceTreeTop(instanceTree.getName(), instanceTree.getVersion());
        if (originalTree == null) {
            throw new RuntimeException("HepRep.overlayInstanceTree cannot find instanceTree("+instanceTree.getName()+", "+instanceTree.getVersion()+")");
        }

        // call overlay
        originalTree.overlay(instanceTree);
    }

    public void removeInstanceTree(HepRepInstanceTree instanceTree) {
        instanceTrees.remove(instanceTree);
    }

    public HepRepInstanceTree getInstanceTreeTop(String name, String version) {
        return (HepRepInstanceTree)instanceTrees.get(name, version);
    }

    public HepRepInstanceTree getInstances(String name, String version,
                                           String[] typeNames) {
        // FIXME FREEHEP-364
        return getInstanceTreeTop(name, version);
    }

    public HepRepInstanceTree getInstancesAfterAction(
                                    String name,
                                    String version,
                                    String[] typeNames,
                                    HepRepAction[] actions,
                                    boolean getPoints,
                                    boolean getDrawAtts,
                                    boolean getNonDrawAtts,
                                    String[] invertAtts) {
        // FIXME FREEHEP-365
        return getInstanceTreeTop(name, version);
    }

    public String checkForException() {
        return "Not Implemented";
    }

    public Collection getInstanceTrees() {
        return instanceTrees;
    }

    public void display() {
        System.out.println("HepRep");
        System.out.println("  Layers: "+getLayerOrder().size());
        for (Iterator i=getLayerOrder().iterator(); i.hasNext(); ) {
            String layer = (String)i.next();
            System.out.println("    "+layer);
        }
        System.out.println("  TypeTrees: "+typeTrees.size());
        for (Iterator i=typeTrees.iterator(); i.hasNext(); ) {
            DefaultHepRepTypeTree tree = (DefaultHepRepTypeTree)i.next();
            tree.display("    ");
        }
        System.out.println("  InstanceTrees: "+instanceTrees.size());
        for (Iterator i=instanceTrees.iterator(); i.hasNext(); ) {
            DefaultHepRepInstanceTree tree = (DefaultHepRepInstanceTree)i.next();
            tree.display("    ");
        }
    }
}

