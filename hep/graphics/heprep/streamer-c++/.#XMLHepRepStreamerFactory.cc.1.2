
#include <iostream>
#include <fstream>

#include "XMLHepRepStreamerFactory.h"
#include "XMLHepRepStreamer.h"

#include "StreamerHepRepPoint.h"
#include "StreamerHepRepInstance.h"
#include "StreamerHepRepInstanceTree.h"
#include "StreamerHepRepType.h"
#include "StreamerHepRepTypeTree.h"
#include "StreamerHepRep.h"
#include "DefaultHepRepAction.h"
#include "DefaultHepRepTreeID.h"

using namespace std;
using namespace HEPREP;


XMLHepRepStreamerFactory::XMLHepRepStreamerFactory(bool writeTreesOnly)
    : writeTreesOnly(writeTreesOnly) {
}

XMLHepRepStreamerFactory::~XMLHepRepStreamerFactory() {
}

HepRepWriter* XMLHepRepStreamerFactory::createHepRepWriter(ostream* out, bool randomAccess, bool compress) {
    this->streamer = new XMLHepRepStreamer(out, randomAccess, compress, writeTreesOnly);
    return streamer;
}

HepRepPoint* XMLHepRepStreamerFactory::createHepRepPoint (HepRepInstance* instance,
                               double x, double y, double z) {
    return new StreamerHepRepPoint(streamer, instance, x, y, z);
}

HepRepInstance* XMLHepRepStreamerFactory::createHepRepInstance (HepRepInstance* parent, HepRepType* type) {
    return new StreamerHepRepInstance(streamer, parent, type);
}

HepRepInstance* XMLHepRepStreamerFactory::createHepRepInstance (HepRepInstanceTree* parent, HepRepType* type) {
    return new StreamerHepRepInstance(streamer, parent, type);
}

HepRepTreeID* XMLHepRepStreamerFactory::createHepRepTreeID (string name, string version, string qualifier) {
    return new DefaultHepRepTreeID(name, version, qualifier);
}

HepRepAction* XMLHepRepStreamerFactory::createHepRepAction (string name, string expression) {
    return new DefaultHepRepAction(name, expression);
}

HepRepInstanceTree* XMLHepRepStreamerFactory::createHepRepInstanceTree (string name, string version,
                                                    HepRepTreeID* typeTreeID) {
    return new StreamerHepRepInstanceTree(streamer, name, version, typeTreeID);
}

HepRepType* XMLHepRepStreamerFactory::createHepRepType (HepRepType* parent, string name) {
    return new StreamerHepRepType(streamer, parent, name);
}

HepRepTypeTree* XMLHepRepStreamerFactory::createHepRepTypeTree (HepRepTreeID* treeID) {
    return new StreamerHepRepTypeTree(streamer, treeID);
}

HepRep* XMLHepRepStreamerFactory::createHepRep () {
    return new StreamerHepRep(streamer);
}

