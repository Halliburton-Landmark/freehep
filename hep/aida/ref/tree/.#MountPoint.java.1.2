package hep.aida.ref.tree;

import hep.aida.*;
import hep.aida.ref.event.*;

/**
 * A mount point allows one tree to be "mounted" in another.
 * Mount point extends Folder so that it appears as just another folder
 * to the tree, but it overrides all of Folders methods and forwards 
 * them to the mountPoint within the mounted tree. 
 * @author tonyj
 * @version $Id: MountPoint.java,v 1.2 2002/12/02 23:51:47 tonyj Exp $
 */
class MountPoint extends Folder implements AIDAListener
{
   private Folder mountPoint;
   private Tree tree;
   private Tree source;
   
   int mountDepth;
   String[] prefix;

   MountPoint(Tree source, Path prefix, Tree tree, Folder mountPoint, Path mountPath)
   {
      super(prefix.getName());
      this.tree = tree;
      this.mountPoint = mountPoint;
      this.source = source;
      this.prefix = prefix.toArray();
      this.mountDepth = mountPath.size();
      tree.addListener(this);
   }
   public void stateChanged(java.util.EventObject e)
   {
      TreeEvent te = (TreeEvent) e;
      String [] oldPath = te.getPath();
      int newDepth = oldPath.length - mountDepth + prefix.length;
      String[] newPath = new String[newDepth];
      int i=0;
      for (; i<prefix.length; i++) newPath[i] = prefix[i];
      for (; i<newDepth; i++) newPath[i] = oldPath[i-prefix.length+mountDepth];
      TreeEvent newEvent = new TreeEvent(te.getSource(), te.getID(), newPath, te.getType(), te.getFlags());
      source.fireStateChanged(newEvent);
   }
   
   IManagedObject getChild(int index)
   {
      return mountPoint.getChild(index);
   }

   IManagedObject getChild(String name)
   {
      return mountPoint.getChild(name);
   }

   int getChildCount()
   {
      return mountPoint.getChildCount();
   }

   int getIndexOfChild(IManagedObject child)
   {
      return mountPoint.getIndexOfChild(child);
   }

   void add(IManagedObject object)
   {
      mountPoint.add(object);
   }

   void remove(IManagedObject child)
   {
      mountPoint.remove(child);
   }
   public String getAIDAType()
   {
      return "mnt";
   }
   Tree getTree()
   {
      return tree;
   }
}
