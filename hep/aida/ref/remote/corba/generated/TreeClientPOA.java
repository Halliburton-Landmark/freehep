package hep.aida.ref.remote.corba.generated;


/**
* hep/aida/ref/remote/corba/generated/TreeClientPOA.java .
* Generated by the IDL-to-Java compiler (portable), version "3.1"
* from hep/aida/ref/remote/corba/idl/InterfaceDef.idl
* Thursday, August 14, 2003 7:33:29 PM PDT
*/

public abstract class TreeClientPOA extends org.omg.PortableServer.Servant
 implements hep.aida.ref.remote.corba.generated.TreeClientOperations, org.omg.CORBA.portable.InvokeHandler
{

  // Constructors

  private static java.util.Hashtable _methods = new java.util.Hashtable ();
  static
  {
    _methods.put ("stateChanged", new java.lang.Integer (0));
    _methods.put ("isConnected", new java.lang.Integer (1));
    _methods.put ("connect", new java.lang.Integer (2));
    _methods.put ("disconnect", new java.lang.Integer (3));
  }

  public org.omg.CORBA.portable.OutputStream _invoke (String $method,
                                org.omg.CORBA.portable.InputStream in,
                                org.omg.CORBA.portable.ResponseHandler $rh)
  {
    org.omg.CORBA.portable.OutputStream out = null;
    java.lang.Integer __method = (java.lang.Integer)_methods.get ($method);
    if (__method == null)
      throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);

    switch (__method.intValue ())
    {

  // updates.
       case 0:  // hep/aida/ref/remote/corba/generated/TreeClient/stateChanged
       {
         hep.aida.ref.remote.corba.generated.EventStruct events[] = hep.aida.ref.remote.corba.generated.EventListHelper.read (in);
         this.stateChanged (events);
         out = $rh.createReply();
         break;
       }


  // Return true if TreeClient is already connected to the AidaTreeServer
       case 1:  // hep/aida/ref/remote/corba/generated/TreeClient/isConnected
       {
         boolean $result = false;
         $result = this.isConnected ();
         out = $rh.createReply();
         out.write_boolean ($result);
         break;
       }


  // Make initial connection to the TreeServer.
       case 2:  // hep/aida/ref/remote/corba/generated/TreeClient/connect
       {
         boolean $result = false;
         $result = this.connect ();
         out = $rh.createReply();
         out.write_boolean ($result);
         break;
       }


  // Disconnect from the TreeServer and free all resources associated with it.
       case 3:  // hep/aida/ref/remote/corba/generated/TreeClient/disconnect
       {
         boolean $result = false;
         $result = this.disconnect ();
         out = $rh.createReply();
         out.write_boolean ($result);
         break;
       }

       default:
         throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);
    }

    return out;
  } // _invoke

  // Type-specific CORBA::Object operations
  private static String[] __ids = {
    "IDL:hep/aida/ref/remote/corba/generated/TreeClient:1.0"};

  public String[] _all_interfaces (org.omg.PortableServer.POA poa, byte[] objectId)
  {
    return (String[])__ids.clone ();
  }

  public TreeClient _this() 
  {
    return TreeClientHelper.narrow(
    super._this_object());
  }

  public TreeClient _this(org.omg.CORBA.ORB orb) 
  {
    return TreeClientHelper.narrow(
    super._this_object(orb));
  }


} // class TreeClientPOA
