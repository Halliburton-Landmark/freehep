package hep.aida.ref.remote.corba.generated;


/**
* hep/aida/ref/remote/corba/generated/TreeServerPOA.java .
* Generated by the IDL-to-Java compiler (portable), version "3.1"
* from hep/aida/ref/remote/corba/idl/InterfaceDef.idl
* Thursday, August 14, 2003 7:33:29 PM PDT
*/


// with only one TreeClient.
public abstract class TreeServerPOA extends org.omg.PortableServer.Servant
 implements hep.aida.ref.remote.corba.generated.TreeServerOperations, org.omg.CORBA.portable.InvokeHandler
{

  // Constructors

  private static java.util.Hashtable _methods = new java.util.Hashtable ();
  static
  {
    _methods.put ("treeName", new java.lang.Integer (0));
    _methods.put ("supportDuplexMode", new java.lang.Integer (1));
    _methods.put ("connectNonDuplex", new java.lang.Integer (2));
    _methods.put ("disconnectNonDuplex", new java.lang.Integer (3));
    _methods.put ("connectDuplex", new java.lang.Integer (4));
    _methods.put ("disconnectDuplex", new java.lang.Integer (5));
  }

  public org.omg.CORBA.portable.OutputStream _invoke (String $method,
                                org.omg.CORBA.portable.InputStream in,
                                org.omg.CORBA.portable.ResponseHandler $rh)
  {
    org.omg.CORBA.portable.OutputStream out = null;
    java.lang.Integer __method = (java.lang.Integer)_methods.get ($method);
    if (__method == null)
      throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);

    switch (__method.intValue ())
    {

  // Return the name of the ITree it is connected to.
       case 0:  // hep/aida/ref/remote/corba/generated/TreeServer/treeName
       {
         String $result = null;
         $result = this.treeName ();
         out = $rh.createReply();
         out.write_string ($result);
         break;
       }


  // support "Duplex Mode".
       case 1:  // hep/aida/ref/remote/corba/generated/TreeServer/supportDuplexMode
       {
         boolean $result = false;
         $result = this.supportDuplexMode ();
         out = $rh.createReply();
         out.write_boolean ($result);
         break;
       }


  // returned by TreeServer.
       case 2:  // hep/aida/ref/remote/corba/generated/TreeServer/connectNonDuplex
       {
         String clientID = in.read_string ();
         hep.aida.ref.remote.corba.generated.TreeServant $result = null;
         $result = this.connectNonDuplex (clientID);
         out = $rh.createReply();
         hep.aida.ref.remote.corba.generated.TreeServantHelper.write (out, $result);
         break;
       }

       case 3:  // hep/aida/ref/remote/corba/generated/TreeServer/disconnectNonDuplex
       {
         String clientID = in.read_string ();
         boolean $result = false;
         $result = this.disconnectNonDuplex (clientID);
         out = $rh.createReply();
         out.write_boolean ($result);
         break;
       }


  // Here reference to instance of TreeClient serves as a unique client ID.
       case 4:  // hep/aida/ref/remote/corba/generated/TreeServer/connectDuplex
       {
         hep.aida.ref.remote.corba.generated.TreeClient client = hep.aida.ref.remote.corba.generated.TreeClientHelper.read (in);
         hep.aida.ref.remote.corba.generated.TreeServant $result = null;
         $result = this.connectDuplex (client);
         out = $rh.createReply();
         hep.aida.ref.remote.corba.generated.TreeServantHelper.write (out, $result);
         break;
       }

       case 5:  // hep/aida/ref/remote/corba/generated/TreeServer/disconnectDuplex
       {
         hep.aida.ref.remote.corba.generated.TreeClient client = hep.aida.ref.remote.corba.generated.TreeClientHelper.read (in);
         boolean $result = false;
         $result = this.disconnectDuplex (client);
         out = $rh.createReply();
         out.write_boolean ($result);
         break;
       }

       default:
         throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);
    }

    return out;
  } // _invoke

  // Type-specific CORBA::Object operations
  private static String[] __ids = {
    "IDL:hep/aida/ref/remote/corba/generated/TreeServer:1.0"};

  public String[] _all_interfaces (org.omg.PortableServer.POA poa, byte[] objectId)
  {
    return (String[])__ids.clone ();
  }

  public TreeServer _this() 
  {
    return TreeServerHelper.narrow(
    super._this_object());
  }

  public TreeServer _this(org.omg.CORBA.ORB orb) 
  {
    return TreeServerHelper.narrow(
    super._this_object(orb));
  }


} // class TreeServerPOA
