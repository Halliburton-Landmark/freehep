// Copyright 2002, SLAC, Stanford, U.S.A.
package org.freehep.tools;

import java.io.*;
import java.util.*;
import java.util.regex.*;

import org.freehep.xml.util.XMLWriter;

/**
 * GenerateStatus creates an up-to-date status for all jars in the project, their packages
 * theirs descriptions and status.
 * <p>It scans your config project.properties file for jars, picks up
 * all jars, scans the project-jar.properties and looks for all packages, and
 * build a list. It then scans the supplied directories for package.html files,
 * and filters out all packages without an at-status tag. It generates an XML file
 * for the status.
 *
 * @author Mark Donszelmann
 * @version $Id: GenerateStatus.java,v 1.5 2002/08/07 18:26:27 duns Exp $
 */
public class GenerateStatus {

    public static void main(String args[]) throws IOException {
        if (args.length < 4) {
            System.err.println("Usage: GenerateStatus status.xml project version srcdir(s)");
            System.exit(1);
        }

        Project project = new Project("config", args[1], args[2]);

        for (int i=3; i<args.length; i++) {
            project.scan(new File(args[i]));
        }
        project.printAll();

        XMLWriter xml = new XMLWriter(new FileWriter(args[0]), "    ");
        xml.openDoc();
        xml.printComment("Generated by GenerateStatus, DO NOT EDIT.");
        xml.closeDoc();
        project.toXML(xml);
        xml.close();
    }

    public static class Project {
        private final FileFilter filter = new FileFilter() {
            public boolean accept(File f) {
                if (f.isDirectory()) return true;
                if (f.getName().equals("package.html")) return true;
                return false;
            }
        };

        private Map jars = new TreeMap();        // Sorted by jar name
        private String name;
        private String version;

        public Project(String configDir, String projectName, String version) throws IOException {
            name = projectName;
            this.version = version;
            String fileName = configDir+File.separator+projectName+".properties";
            Properties project = new Properties();
            project.load(new BufferedInputStream(new FileInputStream(fileName)));
            System.out.println("Reading config file '"+fileName+"'...");

            String jars = project.getProperty("jars", "");
            StringTokenizer st = new StringTokenizer(jars, " ,\t\n\r");
            while (st.hasMoreTokens()) {
                module(configDir, projectName, st.nextToken());
            }
        }

        private void module(String configDir, String projectName, String moduleName) throws IOException {
            Matcher m;
            String fileName = configDir+File.separator+projectName+"-"+moduleName+".properties";
            Properties module = new Properties();
            module.load(new BufferedInputStream(new FileInputStream(fileName)));
            System.out.println("Reading config file '"+fileName+"'...");
            String name = module.getProperty("name", moduleName);
            Jar jar = new Jar(name);
            jars.put(name, jar);
            String packages = module.getProperty("packages","");
            StringTokenizer st = new StringTokenizer(packages, " ,\t\n\r");
            while (st.hasMoreTokens()) {
                jar.add(st.nextToken());
            }
        }

        public Jar find(String packageName) {
            for (Iterator i=jars.entrySet().iterator(); i.hasNext(); ) {
                Map.Entry entry = (Map.Entry)i.next();
                Jar jar = (Jar)entry.getValue();
                if (jar.find(packageName)) return jar;
            }
            return null;
        }

        private void scan(File parent) throws IOException {
            File[] files = parent.listFiles(filter);
            for (int i=0; i<files.length; i++) {
                if (files[i].isDirectory()) {
                    scan(files[i]);
                } else {
                    status(files[i]);
                }
            }
        }

        // Look for @status until next @, or until next </body> or until eof.
        private final Pattern statusPattern = Pattern.compile(
            "@status\\s(.*)@\\S*|@status\\s(.*)</body>|@status\\s(.*)\\z",
            Pattern.CASE_INSENSITIVE+Pattern.DOTALL);
        private final Pattern eoStatusPattern = Pattern.compile("\\.\\s|\\.<|\\n");
        private final Pattern descPattern = Pattern.compile("(.*<\\s*body.*?>)?\\s*(<.>)*\\s*(.*)",
            Pattern.CASE_INSENSITIVE+Pattern.DOTALL);
        private final Pattern eoDescPattern = Pattern.compile("\\.\\s|\\.<");

        private void status(File file) throws IOException {
            System.out.print("Processing "+file+"...");
            String packageName = file.getParentFile().getPath().replaceAll("\\"+File.separator,".");
            Jar jar = find(packageName);
            if (jar == null) {
                System.out.println("\nWarning, package '"+packageName+"' does not seem to be included in a jar file");
            }

            String description = "Not Available";
            String status = null;
            Reader r = new FileReader(file);
            StringWriter s = new StringWriter();
            char[] cbuf = new char[8096];
            int rc;
            while ((rc = r.read(cbuf)) >= 0) {
                s.write(cbuf,0,rc);
            }
            r.close();
            s.close();
            Matcher matcher = descPattern.matcher(s.getBuffer());
            if (matcher.find()) {
                String desc = matcher.group(3);
                Matcher eol = eoDescPattern.matcher(desc);
                if (eol.find()) {
                    description = desc.substring(0, eol.start()+1);
                }
            }

            // get status
            matcher = statusPattern.matcher(s.getBuffer());
            if (matcher.find()) {
                for (int i=1; i<=matcher.groupCount(); i++) {
                    if (matcher.group(i) != null) {
                        status = matcher.group(i);

                        // limit it to line length
                        Matcher eol = eoStatusPattern.matcher(status);
                        if (eol.find()) {
                            status = status.substring(0, eol.start()+1);
                        }
                        break;
                    }
                }
            }

            if (jar != null && status != null) {
                System.out.println(" Added to status");
                jar.add(new Package(packageName, description, status));
            } else {
                System.out.println(" Not added to status");
            }
        }

        public void printAll() {
            Set keys = jars.keySet();
            for (Iterator i=keys.iterator(); i.hasNext(); ) {
                String name = (String)i.next();
                Jar jar = (Jar)jars.get(name);
                System.out.println(jar.toString());
            }
        }

        public void toXML(XMLWriter xml) throws IOException {
            xml.setAttribute("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
            xml.setAttribute("xsi:noNamespaceSchemaLocation", "project.xsd");
            xml.setAttribute("NAME", name);
            xml.setAttribute("VERSION", version);
            xml.openTag("PROJECT");
            Set keys = jars.keySet();
            for (Iterator i=keys.iterator(); i.hasNext(); ) {
                String name = (String)i.next();
                Jar jar = (Jar)jars.get(name);
                jar.toXML(xml);
            }
            xml.closeTag(); // PROJECT
        }

    }

    public static class Jar {

        private String name;
        private List patterns = new ArrayList();        // of Patterns
        private List packages = new ArrayList();        // of Packages

        public Jar(String name) {
            this.name = name;
        }

        public void add(String packageName) {
            String pattern = packageName.replaceAll("\\.","\\\\.").replaceAll("\\*",".\\*");
            patterns.add(Pattern.compile(pattern));
        }

        public void add(Package p) {
            packages.add(p);
        }

        public boolean find(String packageName) {
            for (Iterator i=patterns.iterator(); i.hasNext(); ) {
                Pattern p = (Pattern)i.next();
                Matcher m = p.matcher(packageName+".");
                if (m.find()) return true;
            }
            return false;
        }

        public String toString() {
            StringBuffer s = new StringBuffer("Jar: ");
            s.append(name);
            s.append("\n");
            s.append("  Patterns:\n");
            for (Iterator i=patterns.iterator(); i.hasNext(); ) {
                Pattern p = (Pattern)i.next();
                s.append("    ");
                s.append(p.pattern());
                s.append("\n");
            }
            s.append("  Packages:\n");
            for (Iterator i=packages.iterator(); i.hasNext(); ) {
                Package p = (Package)i.next();
                s.append("    ");
                s.append(p);
                s.append("\n");
            }
            s.append("\n");
            return s.toString();
        }

        public void toXML(XMLWriter xml) {
            xml.printComment("Jar "+name+" ");
            xml.setAttribute("NAME", name);
            xml.openTag("JAR");
            for (Iterator i=patterns.iterator(); i.hasNext(); ) {
                Pattern p = (Pattern)i.next();
                xml.setAttribute("NAME", p.pattern().replaceAll(".\\*","*").replaceAll("\\\\.","."));
                xml.printTag("PATTERN");
            }
            for (Iterator i=packages.iterator(); i.hasNext(); ) {
                Package p = (Package)i.next();
                p.toXML(xml);
            }

            xml.closeTag();     // JAR
        }
    }

    public static class Package {

        private String name;
        private String description;
        private String status;

        public Package(String name, String description, String status) {
            this.name = name;
            this.description = description;
            this.status = status;
        }

        public String toString() {
            return "Package: "+name+", "+status+", "+description;
        }

        public void toXML(XMLWriter xml) {
            xml.setAttribute("NAME", name);
            xml.openTag("PACKAGE");
            xml.openTag("DESCRIPTION");
            xml.println(description);
            xml.closeTag();     // DESCRIPTION
            xml.openTag("STATUS");
            xml.println(status);
            xml.closeTag();     // STATUS
            xml.closeTag();     // PACKAGE
        }
    }
}
